Sun Jun  4 23:02:42 PDT 2023
Linux csslab22 4.18.0-425.3.1.el8.x86_64 #1 SMP Wed Nov 9 20:13:27 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
uid=1353848(agrach) gid=2121353848(agrach) groups=2121353848(agrach),605559(lab-access)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
18355 warnings generated.
38877 warnings generated.
57255 warnings generated.
75573 warnings generated.
96413 warnings generated.
/home/NETID/agrach/2023win342d-p5-agrach060/main.cpp:11:20: error: variable name 'es' is too short, expected at least 3 characters [readability-identifier-length,-warnings-as-errors]
  EnrollmentSystem es;
                   ^
Suppressed 96412 warnings (96412 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
1 warning treated as error
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./course.cpp
Running clang-format on ./enrollmentsystem.cpp
Running clang-format on ./main.cpp
Running clang-format on ./student.cpp
Running clang-format on ./university.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==2951080== Memcheck, a memory error detector
==2951080== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2951080== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==2951080== Command: ./a.out
==2951080== Parent PID: 2950962
==2951080== 
==2951080== 
==2951080== HEAP SUMMARY:
==2951080==     in use at exit: 0 bytes in 0 blocks
==2951080==   total heap usage: 1,817 allocs, 1,817 frees, 258,010 bytes allocated
==2951080== 
==2951080== All heap blocks were freed -- no leaks are possible
==2951080== 
==2951080== For lists of detected and suppressed errors, rerun with: -s
==2951080== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
File '/home/NETID/agrach/2023win342d-p5-agrach060/course.cpp':
Name                                                                                                                                                                                                                                                            Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Course::Course(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                                                      1       0 100.00%         1       0 100.00%         0       0   0.00%
Course::addStudent(Student*)                                                                                                                                                                                                                                          5       1  80.00%         9       2  77.78%         4       1  75.00%
Course::removeStudent(Student const*)                                                                                                                                                                                                                                 7       1  85.71%         9       1  88.89%         4       1  75.00%
Course::getClassListByLastName[abi:cxx11]() const                                                                                                                                                                                                                     2       0 100.00%         9       0 100.00%         2       0 100.00%
Course::getClassListByID[abi:cxx11]() const                                                                                                                                                                                                                           2       0 100.00%        15       0 100.00%         2       0 100.00%
Course::cmpID(int, int)                                                                                                                                                                                                                                               1       0 100.00%         3       0 100.00%         0       0   0.00%
operator<<(std::ostream&, Course const&)                                                                                                                                                                                                                              1       1   0.00%         5       5   0.00%         0       0   0.00%
course.cpp:Course::getClassListByID[abi:cxx11]() const::$_0::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const         1       0 100.00%         5       0 100.00%         0       0   0.00%
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                20       3  85.00%        56       8  85.71%        12       2  83.33%

File '/home/NETID/agrach/2023win342d-p5-agrach060/enrollmentsystem.cpp':
Name                                                                                                                                                                                                                                                            Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
EnrollmentSystem::~EnrollmentSystem()                                                                                                                                                                                                                                 2       0 100.00%         5       0 100.00%         2       0 100.00%
EnrollmentSystem::addUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                               4       0 100.00%         8       0 100.00%         2       0 100.00%
EnrollmentSystem::setCurrentUniversity(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                        4       0 100.00%         7       0 100.00%         2       0 100.00%
EnrollmentSystem::getUniversityName[abi:cxx11]() const                                                                                                                                                                                                                4       1  75.00%         6       1  83.33%         2       1  50.00%
EnrollmentSystem::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                             4       1  75.00%         7       1  85.71%         2       1  50.00%
EnrollmentSystem::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                              4       1  75.00%         7       1  85.71%         2       1  50.00%
EnrollmentSystem::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                          4       1  75.00%         7       1  85.71%         2       1  50.00%
EnrollmentSystem::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                             4       1  75.00%         6       1  83.33%         2       1  50.00%
EnrollmentSystem::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                              4       1  75.00%         6       1  83.33%         2       1  50.00%
EnrollmentSystem::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                       4       1  75.00%         6       1  83.33%         2       1  50.00%
EnrollmentSystem::getEnrolledCourses[abi:cxx11](int) const                                                                                                                                                                                                            7       1  85.71%        17       1  94.12%         6       2  66.67%
EnrollmentSystem::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                              4       1  75.00%         6       1  83.33%         2       1  50.00%
EnrollmentSystem::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                7       1  85.71%        17       1  94.12%         6       2  66.67%
EnrollmentSystem::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                      7       1  85.71%        16       1  93.75%         6       2  66.67%
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                63      11  82.54%       121      11  90.91%        40      14  65.00%

File '/home/NETID/agrach/2023win342d-p5-agrach060/main.cpp':
Name                                                                                                                                                                                                                                                            Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
test1()                                                                                                                                                                                                                                                               1       0 100.00%        31      18  41.94%         0       0   0.00%
main                                                                                                                                                                                                                                                                  1       0 100.00%         4       0 100.00%         0       0   0.00%
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                 2       0 100.00%        35      18  48.57%         0       0   0.00%

File '/home/NETID/agrach/2023win342d-p5-agrach060/student.cpp':
Name                                                                                                                                                                                                                                                            Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Student::Student(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)                                                                                                                                                         1       0 100.00%         1       0 100.00%         0       0   0.00%
Student::dropCourse(int, Course*)                                                                                                                                                                                                                                     9       1  88.89%        12       1  91.67%         6       2  66.67%
Student::addCourse(int, Course*)                                                                                                                                                                                                                                      8       1  87.50%        13       2  84.62%         6       1  83.33%
Student::isInCourse(int, Course const*) const                                                                                                                                                                                                                         4       1  75.00%         7       1  85.71%         2       1  50.00%
operator<<(std::ostream&, Student const&)                                                                                                                                                                                                                             1       1   0.00%         5       5   0.00%         0       0   0.00%
student.cpp:Student::isInCourse(int, Course const*) const::$_0::operator()(Course const*) const                                                                                                                                                                       1       0 100.00%         1       0 100.00%         0       0   0.00%
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                24       4  83.33%        39       9  76.92%        14       4  71.43%

File '/home/NETID/agrach/2023win342d-p5-agrach060/university.cpp':
Name                                                                                                                                                                                                                                                            Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
University::University(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                                                                                                                               1       0 100.00%         1       0 100.00%         0       0   0.00%
University::~University()                                                                                                                                                                                                                                             3       0 100.00%         8       0 100.00%         4       0 100.00%
University::readStudentList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                  11       1  90.91%        29       2  93.10%        10       2  80.00%
University::readCourseList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                    9       1  88.89%        25       2  92.00%         8       1  87.50%
University::readEnrollmentInfo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                               12       1  91.67%        20       2  90.00%        12       3  75.00%
University::dropCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                   6       1  83.33%         7       1  85.71%         6       3  50.00%
University::addCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                                                                                                                                    6       0 100.00%         7       0 100.00%         6       0 100.00%
University::isInCourse(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                             6       1  83.33%         8       1  87.50%         6       3  50.00%
University::getCourseTitle(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                              4       1  75.00%         6       1  83.33%         2       1  50.00%
University::getEnrolledCourses[abi:cxx11](int) const                                                                                                                                                                                                                  4       0 100.00%        10       0 100.00%         4       1  75.00%
University::getClassListByLastName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                      3       0 100.00%        10       0 100.00%         2       1  50.00%
University::getClassListByID(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const                                                                                                                                            3       0 100.00%         9       0 100.00%         2       1  50.00%
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                                                                                                                                68       6  91.18%       140       9  93.57%        62      16  74.19%
/home/NETID/agrach/2023win342d-p5-agrach060/course.cpp:
    1|       |#include "course.h"
    2|       |#include "student.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <cassert>
    6|       |#include <iostream>
    7|       |#include <sstream>
    8|       |
    9|       |using namespace std;
   10|       |
   11|       |Course::Course(string courseNumber, string courseName)
   12|    158|    : courseNumber(move(courseNumber)), courseName(move(courseName)) {}
   13|       |
   14|       |// Adds a student to the course
   15|    443|bool Course::addStudent(Student *student) {
   16|  1.38k|  for (const Student *stu : students) {
   17|  1.38k|    if (stu->studentID == student->studentID) {
   18|      0|      return false; // Student is already enrolled
   19|      0|    }
   20|  1.38k|  }
   21|    443|  students.push_back(student);
   22|    443|  return true;
   23|    443|}
   24|       |
   25|       |// Removes a student from the course
   26|      1|bool Course::removeStudent(const Student *student) {
   27|      5|  for (auto it = students.begin(); it != students.end(); ++it) {
   28|      5|    if (*it == student) {
   29|      1|      students.erase(it);
   30|      1|      return true;
   31|      1|    }
   32|      5|  }
   33|      0|  return false; // Student not found
   34|      1|}
   35|       |
   36|       |// Returns all the classes that a student with a given last name is taking
   37|      1|vector<string> Course::getClassListByLastName() const {
   38|      1|  vector<string> classList;
   39|      7|  for (const auto *student : students) {
   40|      7|    string studentInfo =
   41|      7|        student->fullName + " (" + to_string(student->studentID) + ")";
   42|      7|    classList.push_back(studentInfo);
   43|      7|  }
   44|      1|  return classList;
   45|      1|}
   46|       |
   47|       |// Return class list sorted by id of students
   48|      1|vector<string> Course::getClassListByID() const {
   49|      1|  vector<string> classList;
   50|       |
   51|      7|  for (const auto *student : students) {
   52|      7|    string studentInfo =
   53|      7|        student->fullName + " (" + to_string(student->studentID) + ")";
   54|      7|    classList.push_back(studentInfo);
   55|      7|  }
   56|       |  // Sort the class list by student IDs
   57|      1|  sort(classList.begin(), classList.end(),
   58|     15|       [this](const string &studentInfo1, const string &studentInfo2) {
   59|       |         // Extract student IDs from studentInfo strings
   60|     15|         int studentID1 = stoi(studentInfo1.substr(studentInfo1.find('(') + 1));
   61|     15|         int studentID2 = stoi(studentInfo2.substr(studentInfo2.find('(') + 1));
   62|       |
   63|       |         // Compare student IDs using cmpID function
   64|     15|         return cmpID(studentID1, studentID2);
   65|     15|       });
   66|      1|  return classList;
   67|      1|}
   68|       |
   69|       |// Compares student IDs
   70|     15|bool Course::cmpID(int studentID1, int studentID2) {
   71|     15|  return studentID1 < studentID2;
   72|     15|}
   73|       |
   74|       |// Overloaded stream insertion operator to print course details
   75|      0|ostream &operator<<(ostream &out, const Course &course) {
   76|      0|  out << "Course Number: " << course.courseNumber << "\n";
   77|      0|  out << "Course Name: " << course.courseName << "\n";
   78|      0|  return out;
   79|      0|}

/home/NETID/agrach/2023win342d-p5-agrach060/enrollmentsystem.cpp:
    1|       |#include "enrollmentsystem.h"
    2|       |#include "university.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <cassert>
    6|       |#include <iostream>
    7|       |#include <map>
    8|       |#include <vector>
    9|       |
   10|       |using namespace std;
   11|       |
   12|      1|EnrollmentSystem::~EnrollmentSystem() {
   13|      3|  for (const auto &pair : universities) {
   14|      3|    delete pair.second;
   15|      3|  }
   16|      1|}
   17|       |// Add university to the enrollment system
   18|      4|bool EnrollmentSystem::addUniversity(const string &name) {
   19|      4|  if (universities.count(name) == 0) {
   20|      3|    University *newUniversity = new University(name);
   21|      3|    universities[name] = newUniversity;
   22|      3|    return true;
   23|      3|  }
   24|      1|  return false;
   25|      4|}
   26|       |
   27|       |// Set this university as the active university for other functions
   28|      2|bool EnrollmentSystem::setCurrentUniversity(const string &name) {
   29|      2|  if (universities.find(name) != universities.end()) {
   30|      1|    currentUniversity = universities[name];
   31|      1|    return true;
   32|      1|  }
   33|      1|  return false;
   34|      2|}
   35|       |
   36|       |// Return the current active university name
   37|      1|string EnrollmentSystem::getUniversityName() const {
   38|      1|  if (currentUniversity != nullptr) {
   39|      1|    return currentUniversity->name;
   40|      1|  }
   41|      0|  return "";
   42|      1|}
   43|       |
   44|       |// Read the student list for the current active university
   45|      1|bool EnrollmentSystem::readStudentList(const string &filename) {
   46|      1|  if (currentUniversity != nullptr) {
   47|      1|    currentUniversity->readStudentList(filename);
   48|      1|    return true;
   49|      1|  }
   50|      0|  return false;
   51|      1|}
   52|       |
   53|       |// Read the course list for the current active university
   54|      1|bool EnrollmentSystem::readCourseList(const string &filename) {
   55|      1|  if (currentUniversity != nullptr) {
   56|      1|    currentUniversity->readCourseList(filename);
   57|      1|    return true;
   58|      1|  }
   59|      0|  return false;
   60|      1|}
   61|       |
   62|       |// Read the student enrollment information for the current active university
   63|      1|bool EnrollmentSystem::readEnrollmentInfo(const string &filename) {
   64|      1|  if (currentUniversity != nullptr) {
   65|      1|    currentUniversity->readEnrollmentInfo(filename);
   66|      1|    return true;
   67|      1|  }
   68|      0|  return false;
   69|      1|}
   70|       |
   71|       |// Drop student from given course, return true if successful
   72|      1|bool EnrollmentSystem::dropCourse(int studentID, const string &courseNumber) {
   73|      1|  if (currentUniversity != nullptr) {
   74|      1|    return currentUniversity->dropCourse(studentID, courseNumber);
   75|      1|  }
   76|      0|  return false;
   77|      1|}
   78|       |
   79|       |// Add student to the given course, return true if successful
   80|      3|bool EnrollmentSystem::addCourse(int studentID, const string &courseNumber) {
   81|      3|  if (currentUniversity != nullptr) {
   82|      3|    return currentUniversity->addCourse(studentID, courseNumber);
   83|      3|  }
   84|      0|  return false;
   85|      3|}
   86|       |
   87|       |// Return true if student is in the given course
   88|       |bool EnrollmentSystem::isInCourse(int studentID,
   89|      1|                                  const string &courseNumber) const {
   90|      1|  if (currentUniversity != nullptr) {
   91|      1|    return currentUniversity->isInCourse(studentID, courseNumber);
   92|      1|  }
   93|      0|  return false;
   94|      1|}
   95|       |
   96|       |// Return the courses student is enrolled in
   97|      1|string EnrollmentSystem::getEnrolledCourses(int studentID) const {
   98|      1|  if (currentUniversity != nullptr) {
   99|      1|    vector<string> enrolledCourses =
  100|      1|        currentUniversity->getEnrolledCourses(studentID);
  101|      1|    sort(enrolledCourses.begin(), enrolledCourses.end());
  102|      1|    string result = "[";
  103|      3|    for (const auto &course : enrolledCourses) {
  104|      3|      result += course + ", ";
  105|      3|    }
  106|      1|    if (!result.empty()) {
  107|      1|      result = result.substr(0, result.size() - 2);
  108|      1|    }
  109|      1|    result += "]";
  110|      1|    return result;
  111|      1|  }
  112|      0|  return "";
  113|      1|}
  114|       |
  115|       |// Return the title for the course
  116|      1|string EnrollmentSystem::getCourseTitle(const string &courseNumber) {
  117|      1|  if (currentUniversity != nullptr) {
  118|      1|    return currentUniversity->getCourseTitle(courseNumber);
  119|      1|  }
  120|      0|  return "";
  121|      1|}
  122|       |
  123|       |// Return class list sorted by last name of students
  124|       |string
  125|      1|EnrollmentSystem::getClassListByLastName(const string &courseNumber) const {
  126|      1|  if (currentUniversity != nullptr) {
  127|      1|    vector<string> classList =
  128|      1|        currentUniversity->getClassListByLastName(courseNumber);
  129|      1|    sort(classList.begin(), classList.end());
  130|      1|    string result = "[";
  131|      7|    for (const auto &student : classList) {
  132|      7|      result += student + ", ";
  133|      7|    }
  134|      1|    if (!result.empty()) {
  135|      1|      result = result.substr(0, result.size() - 2);
  136|      1|    }
  137|      1|    result += "]";
  138|      1|    return result;
  139|      1|  }
  140|      0|  return "";
  141|      1|}
  142|       |
  143|       |// Return class list sorted by id of students
  144|      1|string EnrollmentSystem::getClassListByID(const string &courseNumber) const {
  145|      1|  if (currentUniversity != nullptr) {
  146|      1|    vector<string> classList =
  147|      1|        currentUniversity->getClassListByID(courseNumber);
  148|      1|    string result = "[";
  149|      7|    for (const auto &student : classList) {
  150|      7|      result += student + ", ";
  151|      7|    }
  152|      1|    if (!result.empty()) {
  153|      1|      result = result.substr(0, result.size() - 2);
  154|      1|    }
  155|      1|    result += "]";
  156|      1|    return result;
  157|      1|  }
  158|      0|  return "";
  159|      1|}

/home/NETID/agrach/2023win342d-p5-agrach060/main.cpp:
    1|       |
    2|       |#include "enrollmentsystem.h"
    3|       |#include <cassert>
    4|       |#include <iostream>
    5|       |#include <sstream>
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// check enrollment system
   10|      1|void test1() {
   11|      1|  EnrollmentSystem es;
   12|      1|  assert(es.addUniversity("UWB"));
   13|      0|  assert(!es.addUniversity("UWB"));
   14|      0|  assert(es.addUniversity("UW Seattle"));
   15|      0|  assert(es.addUniversity("UW Tacoma"));
   16|      0|  assert(!es.setCurrentUniversity("UWx"));
   17|      0|  assert(es.setCurrentUniversity("UWB"));
   18|      0|  assert(es.getUniversityName() == "UWB");
   19|       |  // read data
   20|      0|  assert(es.readCourseList("data-courses.txt"));
   21|      0|  assert(es.readStudentList("data-students.txt"));
   22|      0|  assert(es.readEnrollmentInfo("data-enrollments.txt"));
   23|       |  // check courses
   24|      0|  assert(!es.addCourse(999, "CSS342"));
   25|      0|  assert(!es.addCourse(1070, "CSS3422"));
   26|      0|  assert(!es.isInCourse(1070, "CSS342"));
   27|      0|  assert(es.addCourse(1070, "CSS342"));
   28|      0|  assert(es.dropCourse(1070, "CSS343"));
   29|      0|  assert(es.getCourseTitle("CSS342") ==
   30|      1|         "Data Structures, Algorithms, and Discrete Mathematics I");
   31|       |  // check enrollments
   32|      0|  assert(es.getEnrolledCourses(1070) == "[CSS110, CSS173, CSS342]");
   33|      0|  string c342byLastName =
   34|      1|      "[Collins, Cassandra (1070), Evans, Juan (1401), Gonzalez, Holly "
   35|      1|      "(1223), Henderson, Daniel (1364), Taylor, Alexander (1986), Thompson, "
   36|      1|      "Christine (1386), Watson, Alex (1211)]";
   37|      1|  assert(es.getClassListByLastName("CSS342") == c342byLastName);
   38|      0|  string c342byID =
   39|      1|      "[Collins, Cassandra (1070), Watson, Alex (1211), Gonzalez, Holly "
   40|      1|      "(1223), Henderson, Daniel (1364), Thompson, Christine (1386), Evans, "
   41|      1|      "Juan (1401), Taylor, Alexander (1986)]";
   42|      1|  assert(es.getClassListByID("CSS342") == c342byID);
   43|      1|}
   44|       |
   45|       |// run all tests
   46|      1|int main() {
   47|      1|  test1();
   48|       |
   49|      1|  cout << "Done." << endl;
   50|      1|}

/home/NETID/agrach/2023win342d-p5-agrach060/student.cpp:
    1|       |#include "student.h"
    2|       |#include "course.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <iostream>
    6|       |#include <sstream>
    7|       |
    8|       |using namespace std;
    9|       |
   10|       |// Constructor
   11|       |Student::Student(const string &fullName, int studentID)
   12|    300|    : studentID(studentID), fullName(fullName) {}
   13|       |
   14|       |// Drop student from given course, return true if successful
   15|      1|bool Student::dropCourse(int studentID, Course *course) {
   16|      1|  if (isInCourse(studentID, course)) {
   17|      3|    for (auto it = courses.begin(); it != courses.end(); ++it) {
   18|      3|      if (*it == course) {
   19|      1|        courses.erase(it);
   20|      1|        course->removeStudent(this);
   21|      1|        return true;
   22|      1|      }
   23|      3|    }
   24|      1|  }
   25|      0|  return false;
   26|      1|}
   27|       |
   28|       |// Add student to the given course, return true if successful
   29|    448|bool Student::addCourse(int studentID, Course *course) {
   30|    448|  if (!isInCourse(studentID, course)) {
   31|    545|    for (const auto *cour : courses) {
   32|    545|      if (cour->courseNumber == course->courseNumber) {
   33|      0|        return false; // Student is already enrolled in the course
   34|      0|      }
   35|    545|    }
   36|    443|    courses.push_back(course);
   37|    443|    course->addStudent(this);
   38|    443|    return true;
   39|    443|  }
   40|       |
   41|      5|  return false;
   42|    448|}
   43|       |
   44|       |// Return true if student is in the given course
   45|    450|bool Student::isInCourse(int studentID, const Course *course) const {
   46|    450|  if (studentID == this->studentID) {
   47|    450|    return std::any_of(courses.begin(), courses.end(),
   48|    565|                       [&](const Course *cour) { return cour == course; });
   49|    450|  }
   50|      0|  return false;
   51|    450|}
   52|       |
   53|       |// Overloaded stream insertion operator to print student details
   54|      0|ostream &operator<<(ostream &out, const Student &student) {
   55|      0|  out << "Student ID: " << student.studentID << "\n";
   56|      0|  out << "Last Name: " << student.fullName << "\n";
   57|      0|  return out;
   58|      0|}

/home/NETID/agrach/2023win342d-p5-agrach060/university.cpp:
    1|       |#include "university.h"
    2|       |#include "student.h"
    3|       |
    4|       |#include <algorithm>
    5|       |#include <cassert>
    6|       |#include <fstream>
    7|       |#include <iostream>
    8|       |#include <sstream>
    9|       |
   10|       |using namespace std;
   11|       |
   12|       |// Constructs a new University
   13|       |// `name` is the name of this university
   14|      3|University::University(string name) : name(name) {}
   15|       |
   16|       |// Destructor to deallocate dynamically allocated memory
   17|      3|University::~University() {
   18|     77|  for (auto &course : courses) {
   19|     77|    delete course.second;
   20|     77|  }
   21|       |
   22|    137|  for (auto &student : students) {
   23|    137|    delete student.second;
   24|    137|  }
   25|      3|}
   26|       |
   27|       |// Read the student list for the current active university
   28|      1|bool University::readStudentList(const string &filename) {
   29|      1|  ifstream file(filename);
   30|      1|  if (!file) {
   31|      0|    return false;
   32|      0|  }
   33|       |
   34|      1|  vector<Student> tempStudents; // Temporary vector to store students
   35|       |
   36|      1|  string line;
   37|    151|  while (getline(file, line)) {
   38|    150|    istringstream iss(line);
   39|    150|    int studentID;
   40|    150|    string lastName;
   41|    150|    string firstName;
   42|    150|    if (iss >> studentID >> firstName >> lastName) {
   43|    150|      string fullName = lastName + ", " + firstName;
   44|    150|      tempStudents.push_back(
   45|    150|          Student(fullName, studentID)); // Add student to temporary vector
   46|    150|    }
   47|    150|  }
   48|       |
   49|      1|  file.close();
   50|       |
   51|       |  // Reverse the order of students in the temporary vector
   52|      1|  reverse(tempStudents.begin(), tempStudents.end());
   53|       |
   54|       |  // Add the students to the 'students' map
   55|    150|  for (const auto &student : tempStudents) {
   56|    150|    if (students.count(student.studentID) != 0) {
   57|     13|      delete students[student.studentID];
   58|     13|    }
   59|    150|    students[student.studentID] =
   60|    150|        new Student(student.fullName, student.studentID);
   61|    150|  }
   62|       |
   63|      1|  return true;
   64|      1|}
   65|       |
   66|       |// Read the course list for the current active university
   67|      1|bool University::readCourseList(const string &filename) {
   68|      1|  ifstream file(filename);
   69|      1|  if (!file.is_open()) {
   70|      0|    return false;
   71|      0|  }
   72|       |
   73|      1|  vector<Course> tempCourses;
   74|      1|  string line;
   75|     80|  while (getline(file, line)) {
   76|     79|    stringstream stringStream(line);
   77|     79|    string courseNumber;
   78|     79|    string courseName;
   79|     79|    stringStream >> courseNumber;
   80|     79|    getline(stringStream >> ws, courseName);
   81|     79|    tempCourses.push_back(Course(courseNumber, courseName));
   82|     79|  }
   83|      1|  file.close();
   84|       |
   85|     79|  for (const auto &course : tempCourses) {
   86|     79|    if (courses.count(course.courseNumber) != 0) {
   87|      2|      delete courses[course.courseNumber];
   88|      2|    }
   89|     79|    courses[course.courseNumber] =
   90|     79|        new Course(course.courseNumber, course.courseName);
   91|     79|  }
   92|      1|  return true;
   93|      1|}
   94|       |
   95|       |// Read the student enrollment information for the current active university
   96|      1|bool University::readEnrollmentInfo(const string &filename) {
   97|      1|  ifstream file(filename);
   98|      1|  if (!file) {
   99|      0|    return false;
  100|      0|  }
  101|       |
  102|      1|  string line;
  103|    451|  while (getline(file, line)) {
  104|    450|    istringstream iss(line);
  105|    450|    int studentID;
  106|    450|    string courseNumber;
  107|    450|    if (iss >> studentID >> courseNumber) {
  108|    450|      if (students.find(studentID) != students.end() &&
  109|    450|          courses.find(courseNumber) != courses.end()) {
  110|    447|        students[studentID]->addCourse(studentID, courses[courseNumber]);
  111|    447|      }
  112|    450|    }
  113|    450|  }
  114|       |
  115|      1|  file.close();
  116|      1|  return true;
  117|      1|}
  118|       |
  119|       |// Drop student from given course, return true if successful
  120|      1|bool University::dropCourse(int studentID, const string &courseNumber) {
  121|      1|  if (students.find(studentID) != students.end() &&
  122|      1|      courses.find(courseNumber) != courses.end()) {
  123|      1|    return students[studentID]->dropCourse(studentID, courses[courseNumber]);
  124|      1|  }
  125|      0|  return false;
  126|      1|}
  127|       |
  128|       |// Add student to the given course, return true if successful
  129|      3|bool University::addCourse(int studentID, const string &courseNumber) {
  130|      3|  if (students.find(studentID) != students.end() &&
  131|      3|      courses.find(courseNumber) != courses.end()) {
  132|      1|    return students[studentID]->addCourse(studentID, courses[courseNumber]);
  133|      1|  }
  134|      2|  return false;
  135|      3|}
  136|       |
  137|       |// Return true if student is in the given course
  138|      1|bool University::isInCourse(int studentID, const string &courseNumber) const {
  139|      1|  if (students.find(studentID) != students.end() &&
  140|      1|      courses.find(courseNumber) != courses.end()) {
  141|      1|    return students.at(studentID)->isInCourse(studentID,
  142|      1|                                              courses.at(courseNumber));
  143|      1|  }
  144|      0|  return false;
  145|      1|}
  146|       |
  147|       |// Return the title for the course
  148|      1|string University::getCourseTitle(const string &courseNumber) const {
  149|      1|  if (courses.find(courseNumber) != courses.end()) {
  150|      1|    return courses.at(courseNumber)->courseName;
  151|      1|  }
  152|      0|  return "";
  153|      1|}
  154|       |
  155|       |// Return the courses a student is enrolled in
  156|      1|vector<string> University::getEnrolledCourses(int studentID) const {
  157|      1|  vector<string> enrolledCourses;
  158|      1|  if (students.find(studentID) != students.end()) {
  159|      1|    vector<const Course *> &courses = students.at(studentID)->courses;
  160|      3|    for (const auto *course : courses) {
  161|      3|      enrolledCourses.push_back(course->courseNumber);
  162|      3|    }
  163|      1|  }
  164|      1|  return enrolledCourses;
  165|      1|}
  166|       |
  167|       |// Return class list sorted by last name of students
  168|       |vector<string>
  169|      1|University::getClassListByLastName(const string &courseNumber) const {
  170|      1|  vector<string> classList;
  171|      1|  if (courses.find(courseNumber) != courses.end()) {
  172|      1|    const vector<string> &classListFromCourse =
  173|      1|        courses.at(courseNumber)->getClassListByLastName();
  174|      1|    classList = classListFromCourse;
  175|      1|    sort(classList.begin(), classList.end());
  176|      1|  }
  177|      1|  return classList;
  178|      1|}
  179|       |
  180|       |// Return class list sorted by id of students
  181|      1|vector<string> University::getClassListByID(const string &courseNumber) const {
  182|      1|  vector<string> classList;
  183|      1|  if (courses.find(courseNumber) != courses.end()) {
  184|      1|    const vector<string> &classListFromCourse =
  185|      1|        courses.at(courseNumber)->getClassListByID();
  186|      1|    classList = classListFromCourse;
  187|      1|  }
  188|      1|  return classList;
  189|      1|}

Sun Jun  4 23:03:07 PDT 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
